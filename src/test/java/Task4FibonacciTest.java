import org.junit.jupiter.api.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.math.BigInteger;

import static java.math.BigInteger.*;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

class Task4FibonacciTest {
    private static final int MIN_LEGAL_ARGUMENT = 0;

    @Test
    void testValidFibonacci() {
        //https://ru.numberempire.com/fibonaccinumbers.php
        //----Valid low border
        assertionValidFibonacci(MIN_LEGAL_ARGUMENT, "0");
        assertionValidFibonacci(1, "1");
        //----Random
        assertionValidFibonacci(2, "1");
        assertionValidFibonacci(3, "2");
        assertionValidFibonacci(4, "3");
        assertionValidFibonacci(5, "5");
        assertionValidFibonacci(6, "8");
        assertionValidFibonacci(7, "13");
        assertionValidFibonacci(8, "21");
        assertionValidFibonacci(9, "34");
        //----Random 2-digit numbers
        assertionValidFibonacci(10, "55");
        assertionValidFibonacci(11, "89");
        assertionValidFibonacci(12, "144");
        assertionValidFibonacci(13, "233");
        assertionValidFibonacci(14, "377");
        assertionValidFibonacci(15, "610");
        assertionValidFibonacci(16, "987");
        assertionValidFibonacci(17, "1597");
        assertionValidFibonacci(18, "2584");
        assertionValidFibonacci(19, "4181");
        assertionValidFibonacci(20, "6765");
        assertionValidFibonacci(21, "10946");
        assertionValidFibonacci(22, "17711");
        assertionValidFibonacci(23, "28657");
        assertionValidFibonacci(24, "46368");
        assertionValidFibonacci(25, "75025");
        assertionValidFibonacci(26, "121393");
        assertionValidFibonacci(27, "196418");
        assertionValidFibonacci(28, "317811");
        assertionValidFibonacci(29, "514229");
        assertionValidFibonacci(30, "832040");
        assertionValidFibonacci(31, "1346269");
        assertionValidFibonacci(32, "2178309");
        assertionValidFibonacci(33, "3524578");
        assertionValidFibonacci(34, "5702887");
        assertionValidFibonacci(35, "9227465");
        assertionValidFibonacci(36, "14930352");
        assertionValidFibonacci(37, "24157817");
        assertionValidFibonacci(38, "39088169");
        assertionValidFibonacci(39, "63245986");
        assertionValidFibonacci(40, "102334155");
        assertionValidFibonacci(42, "267914296");
        assertionValidFibonacci(45, "1134903170");
        assertionValidFibonacci(49, "7778742049");
        assertionValidFibonacci(50, "12586269025");
        assertionValidFibonacci(54, "86267571272");
        assertionValidFibonacci(55, "139583862445");
        assertionValidFibonacci(60, "1548008755920");
        assertionValidFibonacci(61, "2504730781961");
        assertionValidFibonacci(65, "17167680177565");
        assertionValidFibonacci(68, "72723460248141");
        assertionValidFibonacci(75, "2111485077978050");
        assertionValidFibonacci(82, "61305790721611591");
        assertionValidFibonacci(85, "259695496911122585");
        assertionValidFibonacci(96, "51680708854858323072");
        assertionValidFibonacci(99, "218922995834555169026");
        //----Random 3-digit numbers
        assertionValidFibonacci(100, "354224848179261915075");
        assertionValidFibonacci(101, "573147844013817084101");
        assertionValidFibonacci(200, "280571172992510140037611932413038677189525");
        assertionValidFibonacci(222, "11111460156937785151929026842503960837766832936");
        assertionValidFibonacci(296, "32423247527351544763402471792982538876233052554697128188128597");
        assertionValidFibonacci(300, "222232244629420445529739893461909967206666939096499764990979600");
        assertionValidFibonacci(347, "1476475227036382503281437027911536541406625644706194668152438732346449273");
        assertionValidFibonacci(366, "13803567055491817972029187936825113333650564850089197542855968899086435571688");
        assertionValidFibonacci(400, "176023680645013966468226945392411250770384383304492191886725992896575345044216019675");
        assertionValidFibonacci(447, "1169472973094023587946102770935830368494778993361415993112797851329548624931514651986354051298");
        assertionValidFibonacci(500, "139423224561697880139724382870407283950070256587697307264108962948325571622863290691557658876222521294125");
        assertionValidFibonacci(524, "14455678767661239941060750283349851372786616456634781515481577509301997444983826731071749118079998628070030493");
        assertionValidFibonacci(555, "43516638122555047989641805373140394725407202037260729735885664398655775748034950972577909265605502785297675867877570");
        assertionValidFibonacci(600, "110433070572952242346432246767718285942590237357555606380008891875277701705731473925618404421867819924194229142447517901959200");
        assertionValidFibonacci(632, "537902590501030038524405709274099314272539456258213748925637684355834485741204839097920706965893221155253262262501883871576817499509");
        assertionValidFibonacci(648, "1187150773510036578167626437681912852052108086610994713316532355216523644907884381698560556506335045796647564188880191129569438534638176");
        assertionValidFibonacci(700, "87470814955752846203978413017571327342367240967697381074230432592527501911290377655628227150878427331693193369109193672330777527943718169105124275");
        assertionValidFibonacci(781, "741074778816414605504977046938519065095809057519273556463453238660151021724998368384117561486287283471060393289307536079546932993335742578176331343996\n8842702709481");
        assertionValidFibonacci(800, "692830818642247171362900776813285182733991243852048207189660405976914355872783831122771619675325306753741708574047430176234672203617780161721068558389\n75759985190398725");
        assertionValidFibonacci(900, "548771088394800000514136739483837144438005193091235927244949534270398112010643412349543875215253906155049490921874412182466791047314424730220139801604\n07007017175697317900483275246652938800");
        assertionValidFibonacci(941, "203181645431758778127328174139866270310265430389934854603284368775534225937619688296214110996487401111272727082648420388521429637122665821632413653463\n63242536543959341396913936096602060750381379541");
        assertionValidFibonacci(964, "130196766607924699973902550973698197451380632332731079280302542588722570913104098203265585261495446220116328186637339198652929742376947580893276181508\n4406478437505702622886684757604851321223369645403523");
        assertionValidFibonacci(984, "196948647987116431821332597157835268495177566640858122800349683508668042624257693958534732727244131786877476522145319699337853147069562928112471850584\n30426437434710890969660874074205927684542824324019257888");
        assertionValidFibonacci(999, "268638100244853593861467272021429239676166093189869523401231759976179817002478816893383696544833565641918278561614433563129766736422103503246348504103\n77680367334151172899169723197082763985615764450078474174626");
        //----Random 4-digit numbers
        assertionValidFibonacci(1_000, "434665576869374564356885276750406258025646605173717804024817290895365554179490518904038798400792551692959225930803226347752096896232398733224711616429\n96440906533187938298969649928516003704476137795166849228875");
        assertionValidFibonacci(1_001, "703303677114228158218352548771835497701812698363587327426049050871545371181969335797422494945626117334877504492417659910881863632654502236471060120533\n74121273867339111198139373125598767690091902245245323403501");
        assertionValidFibonacci(1_111, "685146298126536953630429887722323115406435539062319541988566148416284973554125695276236087144815614255214846079344158569106813168237085513501989682580\n8086317430648360941203391832868742715640036246053259136014253626356840914521594989");
        assertionValidFibonacci(2_000, "422469633339230487870672560234148278257985284025068109801028013731430858437013070722412359963914151108844608753890960360764019471164359602927198331259\n873732625355580260699158591522949245390499872225679531698287448247299226390183371677806060701161549788671987985831146887087626459736908672288402365442\n2295243347964480139515349562972087652656069529806499841977448720155612802665404554171717881930324025204312082516817125");
        assertionValidFibonacci(2_222, "104966721620282584734867037988863914269721309244628258918225835217264239539186480867849267122885365019934494625410255045832359715759649385824745506982\n513773397742803445080995617047976796168678756479470761439513575962955568645505845492393360201582183610207447528637825187188815786270477935419631184553\n635981047057037341800837414913595584426355208257232868908837817478483039310790967631454123105472742221897397857677674619381961429837434434636098678708\n225493682469561");
        assertionValidFibonacci(2_487, "252799551741100835393402847749281225335917206436946786770846334756985029618459502086084824813236731660564608308077605244692017890306960626511842114871\n208281964584603723645266319625185317437287005389791928924029970593283909176518149003071845109012326960787269190958566591851554901713796497309521260909\n486863216354440863325497763742661690695240782171033359829804205490061830843519832432007979674082493464902089947440977494683411214885445038702478562016\n7790425209983559418756091021947311675595939342344300428192132950925858");
        assertionValidFibonacci(3_000, "410615886307971260333568378719267105220125108637369252408885430926905584274113403731330491660850044560830036835706942274588569362145476502674373045446\n852160486606292497360503469773453733196887405847255290082049086907512622059054542195889758031109222670849274793859539133318371244795543147611073276240\n066737934085191731810993201706776838934766764778739502174470268627820918553842225858306408301661862900358266857238210235802504351951472997919676524004\n784236376453347268364152648346245840573214241419937917242918602639810097866942392015404620153818671425739835074851396421139982713640679581178458198658\n692285968043243656709796000");
        assertionValidFibonacci(3_324, "211558845695277340844894771099362995630509316717807395132693744806839352101143008182281457562530294028702336458030647045007053228495829910262677027621\n474238250892897717094877807279364699711869091641452867324457546829290508720041912706501294511849416337035003913955477901995935980571970701927901739983\n754960611752158286162407587768295551328474428343173646948262138499187163728305012742664721644763884888819521482434728833054759418602367646893798452787\n910955108382506801577470837623269515303335104308344042819473433859602405024174292909113352199051697742932838609415885227280897313427303759896613842263\n10993031769252954530949573845489062415596103479507892439481894708425288547028189341663840725968");
        assertionValidFibonacci(4_000, "399094734350044227920812480949609126007925709828202578526288763265230518186413734335491367694241324422939693065375201182738796280254432353703622509554\n356541715928979667908648144582231419142725908974684721803706396953344496626503128747355609262982462494041683090642143510444590777494252367776608092260\n951518520527813529754494825658383698091837717874396608251405028243431319117112963924571388674865939235441778937354286022382122491565646314525076586034\n000120036853229848384889623514926325777553544529040492412945656625194172350200498738738786027313792078932123354234848734690830545563298941672628186925\n998152095825172779650590682355431394593750282768512214358159573742731438244229094163953751787392685443681268942409791353221760803747809980106577107756\n25856041594078495411724236560242597759185543824798332467919613598667003025993715274875");
        assertionValidFibonacci(4_781, "661337322839244020529448762061498838625822185407709121508540998594682904585308540198620399347330470400653280666540992810413273565832926917994398713638\n718230004471776413151146318909185589434770973461837586080318941036906375808818987789429626217366616261579890860369055555894732519548901040157604298546\n742957666096845809463021127999592568557636384690462092341124092401245911116667639704650585763476554594656814646920798543755041993472555505701157143290\n739289844688760895075749533130953287080934600205342326904398216342904642143410026582439596278979961166556037913414174756579068802168337413360918567937\n945101952123966744780579475400056938418442029794142856905251486526028946063939727834195575354173400454719814829506586601492013100468780852140836021109\n820860257494909387619656513364393990237289782342713423952649505274336811640790273740875206602634583227097792146230883268422965993230492657630338344967\n767776216497296016612316692840479306680187737608910337658122657075262622220319456797676633847360981");
        //----Between borders
        assertionValidFibonacci(4_999, "239733434610063145233333680002377874339640098809021233286522723403238711776762616746506079506559558085069123739096384598716547807408512464434890253068\n508324670942385834269232971811016297226815220085723268611963878154723802007836294547077766871105706961842574638792093125508462136013565569845662932211\n161482732445576774862384436342626037237419515357710129883783120858053067728998202952716430687602434283854745422838879638007702991763946996365304807647\n326945294358403784877315845673636705746007907560307299665308931804627929624010077736036720004022680743092433461693157725719508579306013381791151454022\n701175633599960455012196866379360483094523811668632550634489392877651569608885146881802373582554650231756295745950661270485076035107700653250751981360\n049860320593702295674002197032759954818462671503201580144575407451975392490131760501356151661365017344581802824257735636914397771949573942813019108999\n3769093308407443558168431535751910046557480949313497996285124526992631353143367314930548703966553707195171094152730704138121243470432644848607501");
        assertionValidFibonacci(5_000, "387896845438832563370191630832590531208212771464624510616059721489555013904403709701082291646221066947929345285888297381348310200895498294036143015691\n147893836421656394410691021450563413370655865623825465670071252592990385493381392883637834751890876297071203333705292310769300851809384980180384781399\n674888176555465378829164426891298038461377896902150229308247566634622492307188332480328037503913035290330450584270114763524227021093463769910400671417\n488329842289149127310405432875329804427367682297724498774987455569190770388063704683279481135897373999311010621930814901857081539785437919530561751076\n105307568878376603366735544525884488624161921055345749367589784902798823435102359984466393485325641195222185956306047536464547076033090242080638258492\n915645287629157575914234380914230291749108898415520985443248659407979357131684169286803954530954538869811466508206686289742063932343848846524098874239\n5873801976993820317174208932265468879364002630797780058759129671389634214252579116872755600360311370547754724604639987588046985178408674382863125");
        assertionValidFibonacci(5_001, "627630280048895708603525310834968405547852870273645743902582444892793725681166326447588371152780625032998469024984681980064858008304010758471033268759\n656218507364042228679923993261579710597471085709548734282035130747714187501217687430715601622996583258913777972497385436277762987822950550026047713610\n836370909001042153691548863233924075698797412259860359192030687492675560036186535433044468191515469574185196007108994401531930012857410766275705479064\n815275136647552912187721278548966510173375589858031798440296387373818700012073782419316201139920054742403444083623972627576590119091451301321713205098\n806483202478337058378932410905244971718685732723978300002079177780450393043987506866268767067880291426978481702256708806949623111140790895331390239852\n965505608222859871588236577946990246567571569918722565587824066859954749621815929788160106192319556214393269332464421926656461704293422789337117983238\n9642895285401263875342640468017378925921483580111278055044254198382265567395946431803304304326865077742925818757370691726168228648841319231470626");
        //----Random
        assertionValidFibonacci(5_555, "377447528914490075738161875546019372871339299226266072099160267907822151752129336607655986724267827765470084549195232424567470197095649607833363556152\n278963172192444473035196673134112234877014452650501566099127781313138782755034675519578474122891377128537199404592009250091086748668522825336932701719\n952239283318974858182982723608214090208855212940570758757983388817959262330908465987475774678198244485677329066993546078577681566678501794248951561546\n473239277555496637937369595781218886907376096257612744396753546816662359772256655484345051844885122195449080221614580351520629469992789648442616251580\n240510457647505282638803370030543960113185249030044928708997966375649693820282846923557007036003415827731957951952720002661435583129932784810880770662\n798127506808984604671779778838104921862784343370497292922973132612686461211321101199236262051973473222189701391465637593073981166842284315312591962832\n554706135087175224022862816168156460819592841709603418729511841001630648952597627943699081934854361409060700886010326314093385234787704148962295787681\n459731509518244569443446671327132779952231588067924177024122165246066657227758499994923470626648325500053731945");
        assertionValidFibonacci(6_000, "377013149387799945333900224880775791236117337930100445535490043525045843539648818562578569150145472631258140598040875416901451349878686710189798735122\n954887088454924500028574003068434783807870575430696066439101846750599745829545721693784957073273631818673420751972327938538799801845560513422262958882\n244516053880771140410978978788942838058153862334417256446852231577242261307228498349256708182071208335817888584565766108075330781175405119280446072770\n439376209526520001751104214901240319492664624851096737783185573483303395157215338535471110527043630771804782569715147171393026481175856948947183228899\n948494260568208750719855268516476269647878714108168277444438804007613683373880351707165423524328506540659186023484368510133227968867699680214790847184\n799670735773757954844122828271297646621289176554762574427786113873868257758061282170336001273324376526581229870956568892731479303850890073064863486442\n100376745831539591175879381143478831554126208085279063513741706269326525112915577755575469466383184602256762543155745636219359236200272816189871334546\n629683994275939790168821520825923115371290776425534079797676308190573421064864056358117445863611087717811034416870861710009856863627270553744159738699\n063771087537466728943484891875282416138475233419592000");
        assertionValidFibonacci(6_478, "296789503451490444919481289476593903221877293895879963497771434669996562537295393788170821157990519683346586063117644867772894627813373416647782808893\n441596038762288845296218718533744485863763383990821305841449494298310235127389132841129561618154594504786866974369372258443402687957302242682004887496\n665929412764515731941160141796351562054585061278399962696536948072869762832528410378815152640767225500574889916719847419364479835965250286506092737348\n949235007419403197158671954394081429454273114083662881214883164093097559548963296026091577023733630602622490976961713131700542293419059992101852787417\n337145695570170980664001022594478474536007519128791423229400028191755318128688403577100353366702500239725349818281320570065334816839123576692540724983\n177283201891640213025389479086505957687367056517429599330674967735921889594259240780326431769166456501981120558251845710239291228668704220306304675283\n033566435231460239641774517882811159174308444870866289711739014586145190554554439613345368253704671789158436900905274670466498587565034955018643769910\n053368650690740150172539820156749291106120370706154145267817102441604642320169413219823033644699023825129775780730331260996079440474281118588181191324\n430317067620627748926267853593746150878635644109233605967827673903072355057900455501954739408453873907300450251997762912483992178968805024852985801756\n3039");
        assertionValidFibonacci(7_000, "366434830503723283227635896728160492185715439341759896262706987207280114599614526152053044740885086342851333937720801438606098584376372899095056033825\n107960458188127617648439630978827568993068806323391496244577925210655496624507469829546295160700987649783441511835995330030762779087743459391817243909\n019805275976633115556130331941538448665875113367934989079027834056981179027194590668556273530473374341075308297806336029119084263897552528237137625514\n625139073770774797947702482294838436466336818335492151234705854827154728090873839417589043465226408479182333077269328866108345114427090779695990005117\n224442643471755382945481853638762026546985115627193770965426310539435270280830110342495740505443289855351689552916713660362444791587432378032795204011\n880532527884702888478000351372675123176633429260114393334028014521369041992958201987034328371275338650330779174410100898022841492469103704073386054730\n663565822108884580528522055691701523568506284269126884159083365298189844996272456235892106505571347914983448350547947756232111875546791699814341126089\n145748433246683326437750109247056900191022745751456134839226815963856547592332694442642416195266808081341737280349475872783233388450598439414037223575\n558750012302913355794850648784308559343577303219076693667107597304311585020946440826703894644256389422018773931805536475153773174336282160988894513327\n18516720207276058883659104584529812229076091130643430114436305262385420314059450210042195431947096493318081320875");
        assertionValidFibonacci(7_846, "233098993974529573631212613546430474658396952975903450440369235779848867135649423705743223662402200228138641204627178336584575384848826378280210505756\n729088138237988470245468812976577713730229924130659037533435591777124580868811871062441180843503855968732835569270874057867203015220096635423560580286\n553187750869266272311400734881794298135895008015386106654882312546808760564009524262275045705511734905811194073063312062301729358766141013059914029845\n566524474378397627189848447194976820409366387824355037994600163175652573295283823747095054611618215679785656682031585195858151900991058796311776933052\n820719525775224995070723822026980299933921235060642765340950343346980006710406701952018502955663954129962349886024997479256559528987952962176239872925\n856698898514766214728561163949808480506236136441899199947927868937909334332920841078320587190346218457412119344223184072411254336342660549372540466160\n421979110572367443494871307207839175243415648174454248781747437043183626615458073390593543579828920171759127716004009588644416986832744983091964897203\n933703237675088318504897371569677255766339084088106731624081285326033442699436130391830478889046592566310029580474959541951861586332262625201216340424\n411111095395180317898372482010888765735210824673431994413442621597345706258186849761450724498245968792279937865313306179099906344349584097184660555190\n194455144088940564859231119618360192998122416311520207082117748345412868782012675461072448665827822324721356893338010607284983432704355692864939185257\n84664832778579296036000215769781559945164802992129698668007130054869040188169097526916689432768565796675308761768008956352719992620770068303");
        assertionValidFibonacci(8_000, "356153320446062673976891490542746038714136953911015408297350063899188581949871181530482924622396337374987342308321688978203422852169326717559421418611\n197881681923695974328432127309753565461471880805024432169900251246620383556603035109265249681570845598082565487718153874182712942168912899187964953324\n613616899859004496573503581085677460538362837897929058053913579198506348499287793247348705406889947693739929519390552742079297590291383601219906268706\n353751015175375810062640259175118392588315161764837500531345349327168124823305985849695179011325589742953956065449663960113203936016754227747249890188\n467940450989426917451932891816074565532763200673618976680196853419572581542178408349502696954206604775888502969525726333071922395630904319565393034798\n349683080175557298241982188127556917992297341573601028956170069947702148863550978450916801958964019023435002167380285683636576744624942490727301668905\n338800078563744492152341460236086000153013993361521538322092708475052829377949100281355709386086383946328725144311558161826695980200556697387479347525\n666312203903005606120018612323643059227948425476615865054506993352806168014104657411510301453210159584182247476421388938511417454335213785668069468724\n409796809992418381568965277930293732972925367857964921588407833442833803732745122072281058768017225587879544952478155497309710917414063262316765902745\n055046104505588387222565979681284707528647520820592387566840516070777856899530692617802317631579996553942543779108325830323859264101087826424988358603\n491275602107046874299590277390248749701033587384040852090005905407128326681632548923056600311054994668547523082111450997154266274204423717428224802095\n3398789607528748909125");
        assertionValidFibonacci(8_647, "584305856675768794273245405402130669049376766774968299424276154226478039709495018017181545935919265393543851738039748623270239692881738534196206117377\n214476800371414860628205331431208745312299503856820936624583910182642375331750159265159534236067511202165085673056067496613492103518205596623711582978\n941769412084262977993900262158733393070708634111200358268619500199003249287279058424683182894569202343253203745170639764800618603086028220474301472919\n463595065231890690294432871367077312354718661463372422480866164792638793084169370544078414395322026154541614015103101953555233908954946180636497107665\n410411530158254284482804721258594333558393346579553581426173339051196190798219609645209908585444936813044224032837957845264022446217688656898572463184\n173281698408742064518033279180591280029117564455591945357201100300999277600522624319614116410102735180084496372261604248996383621832020829020301217467\n161996615006859807987410911473503772349885490550871365171154460045422614140852019073035964801421115377508551347015990168794558775649635782754682212950\n694597394369327659516778843956292154971912714270782410357933253563491117016304546542294394836867061997867873695798218101351161495891469831398324714332\n704171595105084989121764034034595818987976259701908124652795603995351185226650760118519967831923579370843222284651189237007161060334301245330473159569\n942716679161594323834425481041578360530891657139797133271855131456441738955693375343651723966097176959710582171135256215134161307260492969328515729675\n823588382510526881800682589374242780164531653106183881902888798872337585804109328288505444154318170534413565768719186934731166951539050610765597736458\n243402074602545914027941558674320724690864684003104491507023518939071280340278286695486918615388524878303091175264035861399249562839848941761806346569\n6632973");
        assertionValidFibonacci(9_000, "346160291286684746313289272940653195821004938840574649197792354882626761451249209476688158830845438584081783077248969641036805567685925275096026379667\n053520731117017902152350004056055263290740468312565519013758527115134986679500927618960595898784125436743322890902556558480966166842068858827121368084\n037500398689666218044551350360442646862696279483129043660912539980584260616428129687853518243358544506024804211410314325692133398509706576596745187284\n000675448960566587838629300214068490071678112576561242120168921521062906855593650494011391615760506296564726181583639595605639315514462323593255726350\n681177298919692687529131475966996479175735276726414564038873951028105275764984412066591637415934772279139455253087288034009154993561193308269619883651\n016764739580528775882659332284075160900251889565909001620005955898020498741253426259183467407856451935255744598735677063143605951074135853992415938277\n666700535092854704966755528337679057697026202081967337389133151551900992563506110333584028337592625787023110008351289364452178195306107056259768301902\n940710358705695173401175797592063874235214258319794748258830812224447883759078743189231351248058057742818858083652751310389157188583652487191753681908\n871324452598859106144951594606797195786754559141129782727790928218793262000601818878041232712620482141748965030717911922256234544033929372196985105014\n830841771293541916105669494308393067698504542986022441130160781328108216014215621166500631310190198456977407701085658980743316402172456165191576635035\n885104241740897029972735571913355609051794588175072614073380279274977928339443177725603335698391914343325635814053921690136602830888930385122496970174\n170881935462763316271613842866892088329627160809282789447665993788904319486227140536689107577971883772835153070545678359828373104418268785375257487856\n252266909918112168299229852218195022374231040315139836301079422737682650129388000");
        assertionValidFibonacci(9_785, "393164994918389393786550361066727647135155411713853971466254780722401873808419846733025505741849497525264833571040809357756311002865742261133701209159\n261739704129350987333614715936607009210573915020752697859710876072985643432733335138319789392404981933670029785896206755558363736921265011418776665321\n837343432517651797916784313853975756818377530347601955990459124075176117021893717692423665926780065643759789048151072407740752376115538253760375734367\n637223754164551239134326441702918365174304511084969156496261894009707587474102270902449257905213263907011769741901466398532752251778373173150936265851\n128279157596004849060330792293532033128409978621470934584621146495457493285110593633751553832986654028922088137119403765586653252440625348073670186241\n481080314784062502960779688065422943142408424736727483536675661812024466416627048330425162498766081241028378594542762022121795121017016567498178490617\n666589688370681930943596414901929055887543898989406993519133662870337840329691617774667814435062706556836604650727987310943825223193364543455453131039\n795337686585464938034512919462768718829280499252206384044620345525219293108514956894605988886052886879535455290867950194756157454718687586427052341316\n973424044003867797891895288716183403996077158113054466586163129900718447144517822359217194054893949461421451041227764402704501376213259637337426214292\n517019708533996834084853685867644528574075111202301838151422989056706917822867644074010718947637848112443457060828404815663718776370872932749963608407\n078803567089484363297269257334405896690310517081501308429852562568208114316366444248521647669114781710188899686266231631364307895738508041932023999061\n182012967362007517277684278203472281043367581944302580671972793402191974872365019018419684189394503537262264059683764926373281237177839957431229049128\n744425161689054783384049361643226558112572330499470813672967156124217865248911906220715489751440254300110231527408683801540902914147014890858280121138\n02229923317768744520288469166314493686910103934978892101812843532928492454625133065857707782285");
        //----Height border of tabular value
        assertionValidFibonacci(9_999, "207936082371334980721126489886428368250870360940159031196829458665285014234556866489274560343052265155917573432971901580106247942672509731761338101799\n027380382317897483462355564831914315919245323944200280678103204087244146934628490626683870833080482509206544933408787332263775808474463248737976037347\n946482581138586315504040810172603812029199438923709428526016473982135544790818235937154295669451493129936648467790904377992847736753792842706601751346\n648332663776986420121068913557911418727769340808035049567940946482928805660563647181876626689707585373833526774208355741559456585420036347653245410061\n210124467856891714948032624086026930912116019739382294466360499015319632861596990778804277202892355393296718771829156434190791865251186788568216008975\n201710704994376570673424008710839088118009762597274318205395542568694608153559184582533982343823604357627598231798961167484242695459246332046141379928\n508143520187384809235815539889908971514694061316956144977837207434613737562186851068568260906963398154909212537145372418669116042505973537478237332681\n781821985092402269558264160166900847498160728435824886131848299053831501800478443537515542015738331055219809981238332532612286898240517778465884610797\n908078283671323847984517940110765690575221586803789615321608583872238829743804839319295412221008003135806885850025988795664632214278204484925650731065\n958088374016489964235633861097820456341224678729218456064091743606356182168838125623216644428229525375774927153653211342045306867424354545051032697681\n443701184949063902549349423589040315098773697224370533831653603885951169802459279352259015376349256548723808771830083010745694440024264364147569050945\n350728047646844921056800247399144905559043913692186963870929181892461571034503870502293006032416114107074539600801709282779518347632167052424858208014\n238665266338160829214428830954632590804718193292017101478280252213856563402074897963176632788722076077910344317001127535588134788887275038253890668230\n98683355695718137867882982111710796422706778536913192342733364556727928018953989153106047379741280794091639429908796650294603536651238230626");
        assertionValidFibonacci(10000, "336447648764317832666216120051075433103021484606800639065647699746800814421666623681555955136337340255820653326808361593737347904838652682630408924630\n564318873545443695598274916066020998841839338646527313000888302692356736131351175792974378544137521305205043477016022647583189065278908551543661595829\n872796829875106312005754287834532155151038708182989697916131278562650331954871402142875326981879620469360978799003509623022910263681314931952756302278\n376284415403605844025721143349611800230912082870460889239623288354615057765832712525460935911282039252853934346209042452489294039017062338889910858410\n651831733604374707379085526317643257339937128719375877468974799263058370657428301616374089691784263786242128352581128205163702980893320999057079200643\n674262023897831114700540749984592503606335609338838319233867830561364353518921332797329081337326426526339897639227234078829281779535805709936910491754\n708089318410561463223382174656373212482263830921032977016480547262438423748624114530938122065649140327510866433945175121615265453613331113140424368548\n051067658434935238369596534280717687753283482343455573667197313927462736291082106792807847180353291311767789246590899386354593278945237776744061922403\n376386740040213303432974969020283281459334188268176838930720036347956231171031012919531697946076327375892535307725523759437884345040677155557790564504\n430166401194625809722167297586150269684431469520346149322911059706762432685159928347098912847067408620085871350162603120719031720860940812983215810772\n820763531866246112782455372085323653057759564300725177443150515396009051686032203491632226408852488524331580515348496224348482993809050704834824493274\n537326245677558790891871908036620580095947431500524025327097469953187707243768259074199396322659841474981936092852239450397071654431564213281576889080\n587831834049174345562705202235648464951961124602683139709750693826487066132645076650746115126775227486215986425307112984411826226610571635150692600298\n61704945425047491378115154139941550671256271197133252763631939606902895650288268608362241082050562430701794976171121233066073310059947366875");
        //----Numbers bigger then tabular value
        assertionValidFibonacci(1_000_000, "");
    }

    @Test
    void testNotValidFibonacci() {
        //------Invalid number input
        assertionNotValidFibonacci("-1", "Expected: from 0\r\nGot: -1");
        assertionNotValidFibonacci("-2", "Expected: from 0\r\nGot: -2");
        assertionNotValidFibonacci("-5", "Expected: from 0\r\nGot: -5");
        assertionNotValidFibonacci("-10", "Expected: from 0\r\nGot: -10");
        assertionNotValidFibonacci("-36", "Expected: from 0\r\nGot: -36");
        assertionNotValidFibonacci("-54", "Expected: from 0\r\nGot: -54");
        assertionNotValidFibonacci("-257", "Expected: from 0\r\nGot: -257");
        assertionNotValidFibonacci("-522", "Expected: from 0\r\nGot: -522");
        assertionNotValidFibonacci("-882", "Expected: from 0\r\nGot: -882");
        assertionNotValidFibonacci("-2247", "Expected: from 0\r\nGot: -2247");
        assertionNotValidFibonacci("-7785", "Expected: from 0\r\nGot: -7785");
        assertionNotValidFibonacci("-45578", "Expected: from 0\r\nGot: -45578");
        //------Character input
        assertionNotValidFibonacciMain("wqetTre", "Expected: integer type \r\nGot: wqetTre");
        assertionNotValidFibonacciMain("number", "Expected: integer type \r\nGot: number");
        assertionNotValidFibonacciMain("lock", "Expected: integer type \r\nGot: lock");
        assertionNotValidFibonacciMain("variable", "Expected: integer type \r\nGot: variable");
        assertionNotValidFibonacciMain("-=!uy0", "Expected: integer type \r\nGot: -=!uy0");
    }


    //------The check method for valid arguments
    void assertionValidFibonacci(int n, String expectedNumber) {
        if (!expectedNumber.isEmpty()) {
            String expectedNumberWithoutSeparate = expectedNumber.replace("\n", "");
            assertionValidFibonacciMain(n, expectedNumberWithoutSeparate);
            assertEquals(new BigInteger(expectedNumberWithoutSeparate), Fibonacci.fibonacci(BigInteger.valueOf(n)));
            assertEquals(expectedNumber, Task4Fibonacci.stringFibonacci(new BigInteger(expectedNumberWithoutSeparate)));
        }
        formulaFibonacciN(n);
        formulaFibonacciNPlusTwo(n);
    }

    void assertionValidFibonacciMain(int n, String expectedNumber) {
        String result = main(valueOf(n).toString());
        String expectedByTabularNumber = "Welcome!\r\nEnter value:\r\nN = N-th Fibonacci number = " +
                Task4Fibonacci.stringFibonacci(new BigInteger(expectedNumber));

        assertEquals(expectedByTabularNumber, result);
    }

    //------The check method for invalid arguments
    void assertionNotValidFibonacci(String n, String error) {
        try {
            Fibonacci.fibonacci(new BigInteger(n));
            fail();
        } catch (IllegalArgumentException e) {
            assertEquals(error, e.getMessage());
        }
        assertionNotValidFibonacciMain(n, error);
    }

    //------The check method for invalid arguments
    void assertionNotValidFibonacciMain(String n, String error) {
        String result = main(n);
        String expected = "Welcome!\r\nEnter value:\r\n" + "N = " + error;
        assertEquals(expected, result);
    }

    //------The method checks value by formula Fibonacci fn = f(n-1)+f(n-2)
    void formulaFibonacciN(int n) {
        BigInteger formulaN;

        if (n == 0 || n == 1) {
            formulaN = valueOf(n);
        } else {
            formulaN = Fibonacci.fibonacci(valueOf(n - 1)).add(Fibonacci.fibonacci(valueOf(n - 2)));
        }

        assertionValidFibonacciMain(n, formulaN.toString());
        assertEquals(formulaN, Fibonacci.fibonacci(BigInteger.valueOf(n)));
    }

    //------The method checks value by formula Fibonacci   f(n+2) = fn+f(n+1)
    void formulaFibonacciNPlusTwo(int n) {
        BigInteger formulaNPlusTwo = Fibonacci.fibonacci(valueOf(n)).add(Fibonacci.fibonacci(valueOf(n + 1)));

        assertionValidFibonacciMain(n + 2, formulaNPlusTwo.toString());
        assertEquals(formulaNPlusTwo, Fibonacci.fibonacci(BigInteger.valueOf(n + 2)));
    }

    //----The method imitates console enter from user, and returns string output in console
    String main(String input) {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(input.getBytes());
        System.setIn(byteArrayInputStream);

        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outputStream));
        Task4Fibonacci.main(new String[0]);

        return outputStream.toString().trim();
    }

}